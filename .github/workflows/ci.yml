name: CI/CD and Security Scan Pipeline

on:
  push:
    branches: [master]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [master]

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    # Les permissions sont simplifiées car CodeQL et SonarCloud sont retirés
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- Configuration Python et Dépendances ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (including security/quality tools)
        run: |
          python -m pip install --upgrade pip
          # Installation des dépendances du projet et des outils de qualité/sécurité
          pip install -r requirements.txt pytest pytest-cov bandit pylint

      # --- Étape 1: Tests Unitaires (Qualité) ---
      - name: Create logs directory
        run: mkdir -p logs

      - name: Run tests and generate coverage report
        run: |
          # Exécute les tests et génère un rapport de couverture pour information
          pytest --cov=. --cov-report=term-missing

      # --- Étape 2: Analyse Statique de Sécurité (SAST) avec Bandit ---
      # Bandit scanne le code source pour les vulnérabilités courantes
      - name: Scan code for security issues with Bandit
        run: |
          # Le 'exit-code 0' (par défaut) signifie qu'il échoue la CI si des vulnérabilités de haut niveau sont trouvées.
          # Vous pouvez ajuster 'high' et 'medium' selon vos besoins.
          bandit -r . -ll -x tests/ # -ll = niveau de sévérité élevé et moyen, -x pour exclure le dossier des tests

      # --- Étape 3: Analyse de Qualité de Code avec Pylint ---
      # Pylint vérifie la conformité au style (PEP8), la complexité et les bugs de style
      - name: Lint code with Pylint (Quality Check)
        run: |
          # Cette commande listera les problèmes de style et de qualité.
          # Par défaut, Pylint échouera le job si le code n'atteint pas un certain score.
          pylint --disable=line-too-long $(ls -d */ | grep -v 'venv\|tests') # Ajuster les dossiers à scanner si nécessaire

      # --- Étape 4: Build, Scan de l'image (Trivy, maintenu) et Push ---
      # La suite du workflow de conteneur reste la même

      - name: Generate Docker image version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            GIT_DESC=$(git describe --tags --always --long)
            LAST_TAG=$(echo $GIT_DESC | awk -F- '{print $1}' | sed 's/^v//')
            COMMITS_AHEAD=$(echo $GIT_DESC | awk -F- '{print $2}')
            VERSION="$LAST_TAG-dev.$COMMITS_AHEAD"
          fi
          echo "IMAGE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Generated version: $VERSION"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and load local Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: false
          load: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/searchpy:${{ env.IMAGE_VERSION }}
            ${{ secrets.DOCKER_USERNAME }}/searchpy:latest

      - name: Scan image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ secrets.DOCKER_USERNAME }}/searchpy:${{ env.IMAGE_VERSION }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Push image to Docker Hub
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/searchpy:${{ env.IMAGE_VERSION }}
          docker push ${{ secrets.DOCKER_USERNAME }}/searchpy:latest

  deploy-to-vps:
    name: Deploy to VPS
    needs: build-test-and-push # Ce job dépend du succès du précédent
    runs-on: ubuntu-latest
    # Ne s'exécute que sur la branche master ou sur un tag
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            # Se déplace dans le répertoire de l'application
            cd /var/www/html/search_api

            # Met à jour l'image Docker depuis le registry
            docker compose pull

            # Redémarre les services avec la nouvelle image
            docker compose up -d

            # (Optionnel) Nettoie les anciennes images non utilisées
            docker image prune -f
