name: CI/CD Pipeline for SearchPy

on:
  push:
    branches: [ master ]
    tags:
      - 'v*.*.*'

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Nécessaire pour récupérer tous les tags et l'historique

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests with pytest
      run: pytest

    - name: Generate Docker image version
      id: get_version
      run: |
        # Si c'est un tag, on prend la version du tag (ex: v1.2.3 -> 1.2.3)
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        # Si c'est un commit sur master, on crée une version de dev
        else
          # Récupère la description (ex: v1.2.3-5-gabcdef)
          GIT_DESC=$(git describe --tags --always --long)
          # Extrait le dernier tag (v1.2.3)
          LAST_TAG=$(echo $GIT_DESC | awk -F- '{print $1}' | sed 's/^v//')
          # Extrait le nombre de commits depuis le tag (5)
          COMMITS_AHEAD=$(echo $GIT_DESC | awk -F- '{print $2}')
          VERSION="$LAST_TAG-dev.$COMMITS_AHEAD"
        fi
        echo "IMAGE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Generated version: $VERSION"

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and load local Docker image
      id: build-image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: false # Ne pas pusher l'image, seulement la construire localement
        load: true  # Charger l'image dans le daemon Docker local
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/searchpy:${{ env.IMAGE_VERSION }}
          ${{ secrets.DOCKER_USERNAME }}/searchpy:latest

    - name: Scan image for vulnerabilities with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKER_USERNAME }}/searchpy:${{ env.IMAGE_VERSION }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Push image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/searchpy:${{ env.IMAGE_VERSION }}
        docker push ${{ secrets.DOCKER_USERNAME }}/searchpy:latest
